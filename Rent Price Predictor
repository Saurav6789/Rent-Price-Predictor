{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":6290263,"sourceType":"datasetVersion","datasetId":3617494}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/saurav9786/rent-price-recommender?scriptVersionId=189029472\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Import Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd \nimport numpy as np\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as po\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom scipy.stats import probplot, boxcox\nimport pylab\nfrom sklearn.feature_selection import VarianceThreshold\nimport collections\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, KFold\nfrom sklearn.linear_model import Ridge, Lasso, BayesianRidge\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom scipy.special import inv_boxcox","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:33:19.607367Z","iopub.execute_input":"2024-07-20T06:33:19.607853Z","iopub.status.idle":"2024-07-20T06:33:26.082441Z","shell.execute_reply.started":"2024-07-20T06:33:19.607813Z","shell.execute_reply":"2024-07-20T06:33:26.080876Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 2.Data Loading and Exploration","metadata":{}},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/apartments-for-rent-classified/apartments_for_rent_classified_100K/apartments_for_rent_classified_100K.csv\", sep=\";\", encoding='cp1252')\ntest_df = pd.read_csv(\"/kaggle/input/apartments-for-rent-classified/apartments_for_rent_classified_10K/apartments_for_rent_classified_10K.csv\",  sep=\";\", encoding='cp1252')","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:34:22.875424Z","iopub.execute_input":"2024-07-20T06:34:22.875887Z","iopub.status.idle":"2024-07-20T06:34:26.427193Z","shell.execute_reply.started":"2024-07-20T06:34:22.875852Z","shell.execute_reply":"2024-07-20T06:34:26.425867Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('\\033[1m'\"Shape of the train data file\\n\"'\\033[0m',train_df.shape)\nprint('\\033[1m'\"Shape of the test data file\\n\"'\\033[0m',test_df.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:34:43.274015Z","iopub.execute_input":"2024-07-20T06:34:43.275761Z","iopub.status.idle":"2024-07-20T06:34:43.283111Z","shell.execute_reply.started":"2024-07-20T06:34:43.27571Z","shell.execute_reply":"2024-07-20T06:34:43.281548Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Getting the count of the numerical and categorical columns in the train dataset\ndef count_categorical_numerical_columns(df)-> Tuple[int, int]:\n    # Select categorical columns\n    categorical_columns = df.select_dtypes(include=['object']).columns\n    num_categorical_columns = len(categorical_columns)\n    \n    # Select numerical columns\n    numerical_columns = df.select_dtypes(exclude=['object']).columns\n    num_numerical_columns = len(numerical_columns)    \n    return num_categorical_columns, num_numerical_columns\n\nnum_categorical, num_numerical = count_categorical_numerical_columns(train_df)\nprint(\"Number of categorical columns:\", num_categorical)\nprint(\"Number of numerical columns:\", num_numerical)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:34:58.74385Z","iopub.execute_input":"2024-07-20T06:34:58.745002Z","iopub.status.idle":"2024-07-20T06:34:58.782862Z","shell.execute_reply.started":"2024-07-20T06:34:58.744956Z","shell.execute_reply":"2024-07-20T06:34:58.781331Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Observation**\n\n- Both the train and the test data contains 14 categorical columns and 8 numerical column","metadata":{}},{"cell_type":"code","source":"# Perform an inner merge on all columns\nmerged_df = pd.merge(test_df, train_df, how='inner')\n\n# Check if all rows in small_df are in large_df\nif len(merged_df) == len(test_df):\n    print(\"All rows in the smaller dataframe are part of the larger dataframe.\")\nelse:\n    print(\"Not all rows in the smaller dataframe are part of the larger dataframe.\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:35:55.882222Z","iopub.execute_input":"2024-07-20T06:35:55.8835Z","iopub.status.idle":"2024-07-20T06:35:56.409017Z","shell.execute_reply.started":"2024-07-20T06:35:55.883458Z","shell.execute_reply":"2024-07-20T06:35:56.407424Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Combine the datasets\ndata = pd.concat([train_df, test_df], ignore_index=True)\n# Shuffle the combined dataset\ndata = data.sample(frac=1, random_state=42).reset_index(drop=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:36:11.500836Z","iopub.execute_input":"2024-07-20T06:36:11.501296Z","iopub.status.idle":"2024-07-20T06:36:11.731247Z","shell.execute_reply.started":"2024-07-20T06:36:11.501261Z","shell.execute_reply":"2024-07-20T06:36:11.730017Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Checking the text columns\nprint(data[\"body\"][0])\nprint(data[\"body\"][20])\nprint(data[\"body\"][200])\nprint(data[\"body\"][250])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:36:25.197352Z","iopub.execute_input":"2024-07-20T06:36:25.198677Z","iopub.status.idle":"2024-07-20T06:36:25.206352Z","shell.execute_reply.started":"2024-07-20T06:36:25.198635Z","shell.execute_reply":"2024-07-20T06:36:25.204938Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(data[\"title\"][0])\nprint(data[\"title\"][20])\nprint(data[\"title\"][200])\nprint(data[\"title\"][250])\nprint(data[\"title\"][300])\nprint(data[\"title\"][410])\nprint(data[\"title\"][89])\nprint(data[\"title\"][9000])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:36:38.785186Z","iopub.execute_input":"2024-07-20T06:36:38.785575Z","iopub.status.idle":"2024-07-20T06:36:38.794813Z","shell.execute_reply.started":"2024-07-20T06:36:38.785545Z","shell.execute_reply":"2024-07-20T06:36:38.793183Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Observation** \n\n- Both body and the title contains mostly the information related to the location, no of bedrooms , price range which details are already present in the other columns respectively. ","metadata":{}},{"cell_type":"code","source":"# Removing unnecessary features \n\ndata = data.drop(columns =[\"id\",\"title\",\"body\"])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:37:07.856512Z","iopub.execute_input":"2024-07-20T06:37:07.857061Z","iopub.status.idle":"2024-07-20T06:37:07.901347Z","shell.execute_reply.started":"2024-07-20T06:37:07.857023Z","shell.execute_reply":"2024-07-20T06:37:07.899947Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:37:21.630403Z","iopub.execute_input":"2024-07-20T06:37:21.631002Z","iopub.status.idle":"2024-07-20T06:37:21.643887Z","shell.execute_reply.started":"2024-07-20T06:37:21.630956Z","shell.execute_reply":"2024-07-20T06:37:21.642288Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 3.Exploratory Data Analysis ","metadata":{}},{"cell_type":"markdown","source":"## 3.1 Data Quality Issues ","metadata":{}},{"cell_type":"markdown","source":"### 3.1.1 Data Integrity Issues","metadata":{}},{"cell_type":"code","source":"# Display Unique values \n\ndef display_unique_values(df):\n    # Select categorical columns\n    categorical_columns = df.select_dtypes(include=['object']).columns\n    \n    # Create an empty list to store unique values data\n    unique_values_data = []\n    \n    # Iterate over each categorical column\n    for col in categorical_columns:\n        unique_values = df[col].unique()\n        unique_values_data.append({'Column': col, 'Unique_Values': unique_values})\n    \n    # Create a DataFrame from the list of unique values data\n    unique_values_df = pd.DataFrame(unique_values_data)\n    \n    return unique_values_df\nunique_values_df = display_unique_values(data)\nunique_values_df","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:38:13.803168Z","iopub.execute_input":"2024-07-20T06:38:13.803638Z","iopub.status.idle":"2024-07-20T06:38:13.997698Z","shell.execute_reply.started":"2024-07-20T06:38:13.803604Z","shell.execute_reply":"2024-07-20T06:38:13.996016Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data[\"price_display\"].nunique()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:38:27.272926Z","iopub.execute_input":"2024-07-20T06:38:27.273554Z","iopub.status.idle":"2024-07-20T06:38:27.30086Z","shell.execute_reply.started":"2024-07-20T06:38:27.273504Z","shell.execute_reply":"2024-07-20T06:38:27.299033Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Observation** \n\n- There are columns like address, amenities, cityname , state and source which has higher no of unique values greater than 20.\n- The currency column has one value only which is USD.\n- The price_display is under catgorical column but it should be a numerical column. ","metadata":{}},{"cell_type":"code","source":"unique_price_display_values = train_df[\"price_display\"].unique().tolist() # 1560 Weekly, $ symbol and ,\nprint(unique_price_display_values)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:38:54.541552Z","iopub.execute_input":"2024-07-20T06:38:54.542036Z","iopub.status.idle":"2024-07-20T06:38:54.560877Z","shell.execute_reply.started":"2024-07-20T06:38:54.542001Z","shell.execute_reply":"2024-07-20T06:38:54.559423Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df['price_display'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:39:14.990307Z","iopub.execute_input":"2024-07-20T06:39:14.99078Z","iopub.status.idle":"2024-07-20T06:39:15.030803Z","shell.execute_reply.started":"2024-07-20T06:39:14.990745Z","shell.execute_reply":"2024-07-20T06:39:15.029393Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Remove non-numeric characters except for the decimal point using str.replace() and regex\ndata['price_display'] = data['price_display'].str.replace('[^\\d.]', '', regex=True)\n# Convert the cleaned column to numeric type\ndata['price_display'] = pd.to_numeric(data['price_display'])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:39:26.336942Z","iopub.execute_input":"2024-07-20T06:39:26.337456Z","iopub.status.idle":"2024-07-20T06:39:26.681992Z","shell.execute_reply.started":"2024-07-20T06:39:26.337411Z","shell.execute_reply":"2024-07-20T06:39:26.680338Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Time Field in Unix Timestamp \n\nUnix timestamps are a way to represent time as a single number (typically a 32-bit or 64-bit integer) that counts the number of seconds or milliseconds that have elapsed since the Unix epoch (January 1, 1970, at 00:00:00 UTC).The values 1577360355 and 1577360332 are Unix timestamps in seconds. They represent specific moments in time relative to the Unix epoch. \n\n","metadata":{}},{"cell_type":"code","source":"# Convert Unix timestamps to datetime\n\ndata['time'] = pd.to_datetime(data['time'], unit='s')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:39:51.541608Z","iopub.execute_input":"2024-07-20T06:39:51.542128Z","iopub.status.idle":"2024-07-20T06:39:51.564928Z","shell.execute_reply.started":"2024-07-20T06:39:51.542059Z","shell.execute_reply":"2024-07-20T06:39:51.563312Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['time'].head()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:40:00.288412Z","iopub.execute_input":"2024-07-20T06:40:00.288839Z","iopub.status.idle":"2024-07-20T06:40:00.299027Z","shell.execute_reply.started":"2024-07-20T06:40:00.2888Z","shell.execute_reply":"2024-07-20T06:40:00.297531Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data[\"time\"].dtype","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:40:09.634882Z","iopub.execute_input":"2024-07-20T06:40:09.635313Z","iopub.status.idle":"2024-07-20T06:40:09.644181Z","shell.execute_reply.started":"2024-07-20T06:40:09.63528Z","shell.execute_reply":"2024-07-20T06:40:09.642561Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Extracting features from datetime\ndata['year'] = data['time'].dt.year\ndata['month'] = data['time'].dt.month\ndata['day'] = data['time'].dt.day\ndata['hour'] = data['time'].dt.hour\ndata['minute'] = data['time'].dt.minute\ndata['second'] = data['time'].dt.second\ndata['day_of_week'] = data['time'].dt.dayofweek  # Monday=0, Sunday=6\ndata['day_of_year'] = data['time'].dt.dayofyear","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:40:31.356338Z","iopub.execute_input":"2024-07-20T06:40:31.357415Z","iopub.status.idle":"2024-07-20T06:40:31.417511Z","shell.execute_reply.started":"2024-07-20T06:40:31.357371Z","shell.execute_reply":"2024-07-20T06:40:31.416065Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 3.1.2 Duplicates in Data ","metadata":{}},{"cell_type":"code","source":"# Checking for the duplicates \n\ndata.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:40:57.738874Z","iopub.execute_input":"2024-07-20T06:40:57.739364Z","iopub.status.idle":"2024-07-20T06:40:58.024059Z","shell.execute_reply.started":"2024-07-20T06:40:57.739326Z","shell.execute_reply":"2024-07-20T06:40:58.022362Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Remove duplicate rows\ndata = data.drop_duplicates()\n\n# Verify that duplicates have been removed\nnum_duplicates_after = data.duplicated().sum()\nprint(f\"Number of duplicate rows after removal: {num_duplicates_after}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:41:08.270632Z","iopub.execute_input":"2024-07-20T06:41:08.271122Z","iopub.status.idle":"2024-07-20T06:41:08.831667Z","shell.execute_reply.started":"2024-07-20T06:41:08.271058Z","shell.execute_reply":"2024-07-20T06:41:08.830302Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 3.1.3 Missing Values ","metadata":{}},{"cell_type":"code","source":"# Checking for the missing values \n\ndata.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:41:28.317576Z","iopub.execute_input":"2024-07-20T06:41:28.318916Z","iopub.status.idle":"2024-07-20T06:41:28.456551Z","shell.execute_reply.started":"2024-07-20T06:41:28.318874Z","shell.execute_reply":"2024-07-20T06:41:28.455002Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def calculate_missing_percentage(df):\n    \"\"\"\n    Calculate the percentage of missing values for each column in the DataFrame.\n    \n    Parameters:\n    df (pd.DataFrame): The DataFrame for which to calculate missing values percentage.\n    \n    Returns:\n    pd.DataFrame: A DataFrame containing columns and their corresponding missing values percentage.\n    \"\"\"\n    missing_percentage = df.isnull().mean() * 100\n    missing_percentage_df = missing_percentage.reset_index()\n    missing_percentage_df.columns = ['Column', 'Missing_Percentage']\n    return missing_percentage_df","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:41:39.690221Z","iopub.execute_input":"2024-07-20T06:41:39.690729Z","iopub.status.idle":"2024-07-20T06:41:39.698836Z","shell.execute_reply.started":"2024-07-20T06:41:39.690687Z","shell.execute_reply":"2024-07-20T06:41:39.697473Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"missing_percentage_df = calculate_missing_percentage(data)\nprint(missing_percentage_df)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:41:48.474284Z","iopub.execute_input":"2024-07-20T06:41:48.474814Z","iopub.status.idle":"2024-07-20T06:41:48.618199Z","shell.execute_reply.started":"2024-07-20T06:41:48.474775Z","shell.execute_reply":"2024-07-20T06:41:48.616522Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Observation** \n\n- The features bathrooms, bedrooms, latitude and longitude have very small percentage of missing values. They are being replaced by median.\n- The feature pets_allowed has a lot of missing values ,imputing with a new category (Unknown). ","metadata":{}},{"cell_type":"code","source":"# Fill bathrooms ,bedrooms,latitude and longitude  with median values\ndata['bathrooms'].fillna(data['bathrooms'].median(), inplace=True)\ndata['bedrooms'].fillna(data['bedrooms'].median(), inplace=True)\ndata['latitude'].fillna(data['latitude'].median(), inplace=True)\ndata['longitude'].fillna(data['longitude'].median(), inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:42:13.67259Z","iopub.execute_input":"2024-07-20T06:42:13.673147Z","iopub.status.idle":"2024-07-20T06:42:13.701532Z","shell.execute_reply.started":"2024-07-20T06:42:13.673101Z","shell.execute_reply":"2024-07-20T06:42:13.700245Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Impute 'pets_allowed' with 'Unknown'\ndata['pets_allowed'].fillna('Unknown', inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:42:26.359066Z","iopub.execute_input":"2024-07-20T06:42:26.359611Z","iopub.status.idle":"2024-07-20T06:42:26.378662Z","shell.execute_reply.started":"2024-07-20T06:42:26.359572Z","shell.execute_reply":"2024-07-20T06:42:26.377381Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Remove rows with missing values in the target column\ndata = data.dropna(subset=['price'])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:42:36.932556Z","iopub.execute_input":"2024-07-20T06:42:36.933044Z","iopub.status.idle":"2024-07-20T06:42:36.979024Z","shell.execute_reply.started":"2024-07-20T06:42:36.933004Z","shell.execute_reply":"2024-07-20T06:42:36.977475Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Rechecking for the missing values \n\ndata.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:42:49.271294Z","iopub.execute_input":"2024-07-20T06:42:49.271794Z","iopub.status.idle":"2024-07-20T06:42:49.410376Z","shell.execute_reply.started":"2024-07-20T06:42:49.271758Z","shell.execute_reply":"2024-07-20T06:42:49.408865Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Note** \n\nThe missing values in columns like amenities, address, cityname and state will be handled afterwards, as these columns have high cardinality. \n","metadata":{}},{"cell_type":"code","source":"# Rechecking the value_counts \ndata[\"pets_allowed\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:43:14.227575Z","iopub.execute_input":"2024-07-20T06:43:14.228144Z","iopub.status.idle":"2024-07-20T06:43:14.25907Z","shell.execute_reply.started":"2024-07-20T06:43:14.228068Z","shell.execute_reply":"2024-07-20T06:43:14.257152Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 3.2 Descriptive Statistics ","metadata":{}},{"cell_type":"code","source":"# Descriptive statistics\npd.set_option('display.float_format', '{:.4f}'.format)\ndata.describe().round(4).T","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:43:39.972121Z","iopub.execute_input":"2024-07-20T06:43:39.972686Z","iopub.status.idle":"2024-07-20T06:43:40.090933Z","shell.execute_reply.started":"2024-07-20T06:43:39.97263Z","shell.execute_reply":"2024-07-20T06:43:40.089799Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def describe_with_skewness(df):\n    # Use describe method to get statistics\n    description = df.describe()\n    \n    # Calculate skewness for each numerical column\n    skewness = df.skew()\n    \n    # Create a DataFrame to store results\n    results = pd.DataFrame(index=description.columns)\n    results['count'] = description.loc['count']\n    results['mean'] = description.loc['mean']\n    results['std'] = description.loc['std']\n    results['min'] = description.loc['min']\n    results['25%'] = description.loc['25%']\n    results['50%'] = description.loc['50%']\n    results['75%'] = description.loc['75%']\n    results['max'] = description.loc['max']\n    results['skewness'] = skewness\n    \n    # Classify distribution based on skewness\n    results['distribution'] = np.where(\n        results['skewness'].abs() < 0.5, 'approximately normal',\n        np.where(results['skewness'] > 0, 'right-skewed', 'left-skewed')\n    )\n    \n    # Filter columns based on distribution\n    right_skewed_columns = results[results['distribution'] == 'right-skewed'].index\n    normal_columns = results[results['distribution'] == 'approximately normal'].index\n    left_skewed_columns = results[results['distribution'] == 'left-skewed'].index\n    \n    return right_skewed_columns, normal_columns, left_skewed_columns\n\nright_skewed_columns, normal_columns, left_skewed_columns = describe_with_skewness(data.select_dtypes(include=np.number))\nprint(\"Right-skewed columns:\", right_skewed_columns)\nprint(\"Normal columns:\", normal_columns)\nprint(\"Left-skewed columns:\", left_skewed_columns)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:43:56.059613Z","iopub.execute_input":"2024-07-20T06:43:56.06005Z","iopub.status.idle":"2024-07-20T06:43:56.186763Z","shell.execute_reply.started":"2024-07-20T06:43:56.060015Z","shell.execute_reply":"2024-07-20T06:43:56.185184Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 3.3 Univariate Analysis ","metadata":{}},{"cell_type":"markdown","source":"### 3.3.1 Target Analysis ( Price (Our Target Variable))","metadata":{}},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:44:32.11429Z","iopub.execute_input":"2024-07-20T06:44:32.114804Z","iopub.status.idle":"2024-07-20T06:44:32.125827Z","shell.execute_reply.started":"2024-07-20T06:44:32.114759Z","shell.execute_reply":"2024-07-20T06:44:32.124166Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def visualize_numerical_column(df, column_name):\n    \"\"\"\n    Visualizes the distribution of a numerical column using a histogram and a boxplot.\n    \n    Parameters:\n    df (pd.DataFrame): The DataFrame containing the data.\n    column_name (str): The name of the numerical column to visualize.\n    \"\"\"\n    # Create and show histogram\n    fig_hist = px.histogram(df, x=column_name, color_discrete_sequence=px.colors.qualitative.Set3, title=f\"{column_name} Distribution Histogram\")\n    fig_hist.show()\n    \n    # Create and show boxplot\n    fig_box = px.box(df, x=column_name, title=f\"Boxplot for {column_name}\")\n    fig_box.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:44:44.910276Z","iopub.execute_input":"2024-07-20T06:44:44.910705Z","iopub.status.idle":"2024-07-20T06:44:44.918386Z","shell.execute_reply.started":"2024-07-20T06:44:44.910673Z","shell.execute_reply":"2024-07-20T06:44:44.91684Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"visualize_numerical_column(data,\"price\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:44:56.240484Z","iopub.execute_input":"2024-07-20T06:44:56.240899Z","iopub.status.idle":"2024-07-20T06:44:58.722756Z","shell.execute_reply.started":"2024-07-20T06:44:56.240867Z","shell.execute_reply":"2024-07-20T06:44:58.721392Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- There are Outliers in our Target variable ( outside the InterQuartile range).\n- We need to handle the Outliers here  ","metadata":{}},{"cell_type":"markdown","source":"### 3.3.2 Visualizing the numerical columns ","metadata":{}},{"cell_type":"code","source":"visualize_numerical_column(data,\"square_feet\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:45:40.951235Z","iopub.execute_input":"2024-07-20T06:45:40.951661Z","iopub.status.idle":"2024-07-20T06:45:41.103157Z","shell.execute_reply.started":"2024-07-20T06:45:40.951629Z","shell.execute_reply":"2024-07-20T06:45:41.101785Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 3.3.3 Visualize the categorical columns  ","metadata":{}},{"cell_type":"code","source":"def visualize_categorical_column(df, column_name):\n    \"\"\"\n    Visualizes a categorical column using a count plot (Seaborn) and a pie chart (Plotly Express).\n    \n    Parameters:\n    df (pd.DataFrame): The DataFrame containing the data.\n    column_name (str): The name of the categorical column to visualize.\n    \"\"\"\n    # Set style and create count plot with Seaborn\n    sns.set_style('whitegrid')\n    fig, axes = plt.subplots(figsize=(12, 8))\n    ax = sns.countplot(x=column_name, data=df, palette=['#e3784d', '#87ace8', '#6ecc64', '#b644e3', '#eb7c87', '#EAE509'])\n    for container in ax.containers:\n        ax.bar_label(container)\n    plt.title(f'Frequency of {column_name}', fontsize=15)\n    plt.show()\n    \n    # Create pie chart with Plotly Express\n    fig_pie = px.pie(df, names=column_name, height=700, width=700, \n                     color_discrete_sequence=px.colors.sequential.deep, \n                     title=f'Pie Chart for {column_name}')\n    fig_pie.update_traces(textfont_size=15)\n    fig_pie.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:46:07.474158Z","iopub.execute_input":"2024-07-20T06:46:07.474657Z","iopub.status.idle":"2024-07-20T06:46:07.485598Z","shell.execute_reply.started":"2024-07-20T06:46:07.474623Z","shell.execute_reply":"2024-07-20T06:46:07.483981Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"visualize_categorical_column(data,\"bathrooms\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:46:18.592184Z","iopub.execute_input":"2024-07-20T06:46:18.592612Z","iopub.status.idle":"2024-07-20T06:46:19.335625Z","shell.execute_reply.started":"2024-07-20T06:46:18.592578Z","shell.execute_reply":"2024-07-20T06:46:19.334155Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"visualize_categorical_column(data,\"bedrooms\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:46:36.486899Z","iopub.execute_input":"2024-07-20T06:46:36.487403Z","iopub.status.idle":"2024-07-20T06:46:37.031191Z","shell.execute_reply.started":"2024-07-20T06:46:36.487363Z","shell.execute_reply":"2024-07-20T06:46:37.029787Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"visualize_categorical_column(data,\"category\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:46:58.10514Z","iopub.execute_input":"2024-07-20T06:46:58.106126Z","iopub.status.idle":"2024-07-20T06:46:59.070195Z","shell.execute_reply.started":"2024-07-20T06:46:58.106058Z","shell.execute_reply":"2024-07-20T06:46:59.067888Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"visualize_categorical_column(train_df,\"fee\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:47:16.091658Z","iopub.execute_input":"2024-07-20T06:47:16.092119Z","iopub.status.idle":"2024-07-20T06:47:16.869941Z","shell.execute_reply.started":"2024-07-20T06:47:16.09207Z","shell.execute_reply":"2024-07-20T06:47:16.868576Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"visualize_categorical_column(data,\"has_photo\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:47:33.81543Z","iopub.execute_input":"2024-07-20T06:47:33.816405Z","iopub.status.idle":"2024-07-20T06:47:34.631283Z","shell.execute_reply.started":"2024-07-20T06:47:33.816344Z","shell.execute_reply":"2024-07-20T06:47:34.629845Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"visualize_categorical_column(data,\"pets_allowed\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:47:51.709272Z","iopub.execute_input":"2024-07-20T06:47:51.709786Z","iopub.status.idle":"2024-07-20T06:47:52.576505Z","shell.execute_reply.started":"2024-07-20T06:47:51.709747Z","shell.execute_reply":"2024-07-20T06:47:52.575301Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"visualize_categorical_column(data,\"price_type\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:48:04.428862Z","iopub.execute_input":"2024-07-20T06:48:04.429347Z","iopub.status.idle":"2024-07-20T06:48:05.239241Z","shell.execute_reply.started":"2024-07-20T06:48:04.429311Z","shell.execute_reply":"2024-07-20T06:48:05.237283Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 3.4 Bivariate Analysis wrt to Rent ","metadata":{}},{"cell_type":"code","source":"# Relationship between Rent vs square_feet\nplt.figure(figsize = (10, 8))\nplt.ticklabel_format(style = 'plain')\nplt.scatter(data[\"price\"], data[\"square_feet\"], cmap = 'viridis')\nplt.colorbar();","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:48:36.798243Z","iopub.execute_input":"2024-07-20T06:48:36.798649Z","iopub.status.idle":"2024-07-20T06:48:37.76419Z","shell.execute_reply.started":"2024-07-20T06:48:36.798617Z","shell.execute_reply":"2024-07-20T06:48:37.762883Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Relationship between rent price vs bathrooms\n\nplt.figure(figsize = (20, 7))\nsns.barplot(x = data[\"bathrooms\"], y = data[\"price\"], palette = \"nipy_spectral\",errorbar = None);","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:48:50.173273Z","iopub.execute_input":"2024-07-20T06:48:50.17373Z","iopub.status.idle":"2024-07-20T06:48:50.788832Z","shell.execute_reply.started":"2024-07-20T06:48:50.173696Z","shell.execute_reply":"2024-07-20T06:48:50.787311Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Relationship between rent price vs bedrooms\nplt.figure(figsize = (20, 7))\nsns.barplot(x = data[\"bedrooms\"], y = data[\"price\"], palette = \"nipy_spectral\",errorbar = None);","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:49:07.471452Z","iopub.execute_input":"2024-07-20T06:49:07.471934Z","iopub.status.idle":"2024-07-20T06:49:07.969476Z","shell.execute_reply.started":"2024-07-20T06:49:07.471898Z","shell.execute_reply":"2024-07-20T06:49:07.968005Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Relationship between rent price vs has_photo\nplt.figure(figsize = (20, 7))\nsns.barplot(x = data[\"has_photo\"], y = data[\"price\"], palette = \"nipy_spectral\",errorbar = None);","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:49:45.268769Z","iopub.execute_input":"2024-07-20T06:49:45.269292Z","iopub.status.idle":"2024-07-20T06:49:45.724945Z","shell.execute_reply.started":"2024-07-20T06:49:45.269254Z","shell.execute_reply":"2024-07-20T06:49:45.723768Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Relationship between rent price vs pets_allowed\nplt.figure(figsize = (20, 7))\nsns.barplot(x = data[\"pets_allowed\"], y = data[\"price\"], palette = \"nipy_spectral\",errorbar = None);","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:49:56.299964Z","iopub.execute_input":"2024-07-20T06:49:56.300461Z","iopub.status.idle":"2024-07-20T06:49:56.781427Z","shell.execute_reply.started":"2024-07-20T06:49:56.300423Z","shell.execute_reply":"2024-07-20T06:49:56.779964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plotting the lattitude and longitude \ndef visualize_geographic_data(df, lat_column, lon_column):\n    \"\"\"\n    Visualizes geographic data using a scatter plot.\n    \n    Parameters:\n    df (pd.DataFrame): The DataFrame containing the data.\n    lat_column (str): The name of the latitude column.\n    lon_column (str): The name of the longitude column.\n    \"\"\"\n    fig = px.scatter(df, x=lon_column, y=lat_column, title='Geographic Scatter of Rental Flats',\n                     labels={lat_column: 'Latitude', lon_column: 'Longitude'},\n                     color_discrete_sequence=px.colors.qualitative.Set3)\n    fig.show()\n\n# Example usage\n# Assuming train_df is your DataFrame\nvisualize_geographic_data(data, 'latitude', 'longitude')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:50:08.405662Z","iopub.execute_input":"2024-07-20T06:50:08.406223Z","iopub.status.idle":"2024-07-20T06:50:08.570663Z","shell.execute_reply.started":"2024-07-20T06:50:08.406171Z","shell.execute_reply":"2024-07-20T06:50:08.568821Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 3.5 Multivariate Analysis","metadata":{}},{"cell_type":"code","source":"sns.set_context('notebook', font_scale = 1.3)\nplt.figure(figsize=(30, 22))\n# Create bar plot with errorbar set to None\nax = sns.barplot(x=data['bathrooms'], \n                 y=data['price'],\n                 hue=data['has_photo'], \n                 palette='viridis',\n                 errorbar=None)\n\n# Set the ylabel\nplt.ylabel('Rent')\n\n# Annotate the bars\nfor p in ax.patches:\n    if not pd.isna(p.get_height()):  # Check if height is not NaN\n        ax.annotate(f'{int(p.get_height()):,}', \n                    (p.get_x() + p.get_width() / 2., p.get_height()), \n                    ha='center', va='bottom', \n                    color='Black')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:50:38.855878Z","iopub.execute_input":"2024-07-20T06:50:38.856331Z","iopub.status.idle":"2024-07-20T06:50:40.098894Z","shell.execute_reply.started":"2024-07-20T06:50:38.856296Z","shell.execute_reply":"2024-07-20T06:50:40.09728Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.set_context('notebook', font_scale = 1.3)\nplt.figure(figsize=(22, 10))\nax = sns.barplot(x=data['bathrooms'], \n                 y=data['price'],\n                 hue = data['pets_allowed'], \n                 palette='viridis',\n                 errorbar = None)\nplt.ylabel('Rent');","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:50:52.54023Z","iopub.execute_input":"2024-07-20T06:50:52.541267Z","iopub.status.idle":"2024-07-20T06:50:53.598931Z","shell.execute_reply.started":"2024-07-20T06:50:52.541229Z","shell.execute_reply":"2024-07-20T06:50:53.597298Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.set_context('notebook', font_scale = 1.3)\nplt.figure(figsize=(22, 10))\nax = sns.barplot(x=data['bedrooms'], \n                 y=data['price'],\n                 hue = data['has_photo'], \n                 palette='viridis',\n                 errorbar = None)\nplt.ylabel('Rent');\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:51:08.108426Z","iopub.execute_input":"2024-07-20T06:51:08.108849Z","iopub.status.idle":"2024-07-20T06:51:09.077461Z","shell.execute_reply.started":"2024-07-20T06:51:08.108817Z","shell.execute_reply":"2024-07-20T06:51:09.075954Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.set_context('notebook', font_scale = 1.3)\nplt.figure(figsize=(22, 10))\nax = sns.barplot(x=data['bedrooms'], \n                 y=data['price'],\n                 hue = data['pets_allowed'], \n                 palette='viridis',\n                 errorbar = None)\nplt.ylabel('Rent')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:51:20.380715Z","iopub.execute_input":"2024-07-20T06:51:20.381168Z","iopub.status.idle":"2024-07-20T06:51:21.210788Z","shell.execute_reply.started":"2024-07-20T06:51:20.381133Z","shell.execute_reply":"2024-07-20T06:51:21.209125Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 4.Feature Engineering ","metadata":{}},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:51:43.601347Z","iopub.execute_input":"2024-07-20T06:51:43.601846Z","iopub.status.idle":"2024-07-20T06:51:43.611815Z","shell.execute_reply.started":"2024-07-20T06:51:43.601815Z","shell.execute_reply":"2024-07-20T06:51:43.610146Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"categorical_columns =  data.select_dtypes(include=['object']).columns.tolist()\n# Selecting numerical columns\nnumerical_columns = data.select_dtypes(include=['number']).columns\n# Creating DataFrame with only categorical columns\ncategorical_data = data[categorical_columns]\n# Creating DataFrame with only numerical columns\nnumerical_data = data[numerical_columns]","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:51:53.59374Z","iopub.execute_input":"2024-07-20T06:51:53.594183Z","iopub.status.idle":"2024-07-20T06:51:53.657943Z","shell.execute_reply.started":"2024-07-20T06:51:53.594149Z","shell.execute_reply":"2024-07-20T06:51:53.656806Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 4.1 Checking the columns with Constant values ","metadata":{}},{"cell_type":"markdown","source":"### 4.1.1 Remove the constant numerical columns","metadata":{}},{"cell_type":"code","source":"# Removing the constant Features \nvarModel=VarianceThreshold(threshold=0)\nvarModel.fit(numerical_data)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:52:30.874578Z","iopub.execute_input":"2024-07-20T06:52:30.875003Z","iopub.status.idle":"2024-07-20T06:52:30.912758Z","shell.execute_reply.started":"2024-07-20T06:52:30.87497Z","shell.execute_reply":"2024-07-20T06:52:30.911469Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"constArr=varModel.get_support()\ncollections.Counter(constArr)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:52:42.526127Z","iopub.execute_input":"2024-07-20T06:52:42.527203Z","iopub.status.idle":"2024-07-20T06:52:42.535395Z","shell.execute_reply.started":"2024-07-20T06:52:42.527161Z","shell.execute_reply":"2024-07-20T06:52:42.534287Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Print out constant feature name\nconstCol=[col for col in numerical_data.columns if col not in numerical_data.columns[constArr]]\nconstCol","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:52:53.68399Z","iopub.execute_input":"2024-07-20T06:52:53.684525Z","iopub.status.idle":"2024-07-20T06:52:53.695808Z","shell.execute_reply.started":"2024-07-20T06:52:53.684481Z","shell.execute_reply":"2024-07-20T06:52:53.694157Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Create variance threshold model\nquasiModel=VarianceThreshold(threshold=0.01) #It will search for the features having 99% of same value in all samples.\nquasiModel.fit(numerical_data)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:53:05.676899Z","iopub.execute_input":"2024-07-20T06:53:05.677344Z","iopub.status.idle":"2024-07-20T06:53:05.708622Z","shell.execute_reply.started":"2024-07-20T06:53:05.677312Z","shell.execute_reply":"2024-07-20T06:53:05.707438Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quasiArr=quasiModel.get_support()\ncollections.Counter(quasiArr)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:53:15.516257Z","iopub.execute_input":"2024-07-20T06:53:15.516737Z","iopub.status.idle":"2024-07-20T06:53:15.524954Z","shell.execute_reply.started":"2024-07-20T06:53:15.516701Z","shell.execute_reply":"2024-07-20T06:53:15.523795Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Print out quasi constant feature name\nquasiCols=[col for col in numerical_data.columns if col not in numerical_data.columns[quasiArr]]\nquasiCols","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:53:25.458961Z","iopub.execute_input":"2024-07-20T06:53:25.459396Z","iopub.status.idle":"2024-07-20T06:53:25.472811Z","shell.execute_reply.started":"2024-07-20T06:53:25.459365Z","shell.execute_reply":"2024-07-20T06:53:25.471408Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 4.1.2 Remove the constant categorical columns","metadata":{}},{"cell_type":"code","source":"categorical_data.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:53:50.172417Z","iopub.execute_input":"2024-07-20T06:53:50.172847Z","iopub.status.idle":"2024-07-20T06:53:50.18172Z","shell.execute_reply.started":"2024-07-20T06:53:50.172814Z","shell.execute_reply":"2024-07-20T06:53:50.180293Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ord_enc = OrdinalEncoder()\n# Fit and transform the data using the encoder\ndata_encoded = ord_enc.fit_transform(categorical_data)\n# Convert the encoded data back to a DataFrame\ncategorical_data_encoded = pd.DataFrame(data_encoded, columns=categorical_data.columns)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:53:58.46391Z","iopub.execute_input":"2024-07-20T06:53:58.464477Z","iopub.status.idle":"2024-07-20T06:53:59.02402Z","shell.execute_reply.started":"2024-07-20T06:53:58.464431Z","shell.execute_reply":"2024-07-20T06:53:59.022614Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"varModel=VarianceThreshold(threshold=0)\nvarModel.fit(categorical_data_encoded)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:54:10.203741Z","iopub.execute_input":"2024-07-20T06:54:10.205696Z","iopub.status.idle":"2024-07-20T06:54:10.285028Z","shell.execute_reply.started":"2024-07-20T06:54:10.205631Z","shell.execute_reply":"2024-07-20T06:54:10.283515Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"constArr=varModel.get_support()\ncollections.Counter(constArr)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:54:19.178376Z","iopub.execute_input":"2024-07-20T06:54:19.178813Z","iopub.status.idle":"2024-07-20T06:54:19.187608Z","shell.execute_reply.started":"2024-07-20T06:54:19.178783Z","shell.execute_reply":"2024-07-20T06:54:19.18636Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Print out constant feature name\nconstCol=[col for col in categorical_data_encoded.columns if col not in categorical_data_encoded.columns[constArr]]\nconstCol","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:54:30.150372Z","iopub.execute_input":"2024-07-20T06:54:30.151473Z","iopub.status.idle":"2024-07-20T06:54:30.160948Z","shell.execute_reply.started":"2024-07-20T06:54:30.151421Z","shell.execute_reply":"2024-07-20T06:54:30.159401Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Create variance threshold model\nquasiModel=VarianceThreshold(threshold=0.01) #It will search for the features having 99% of same value in all samples.\nquasiModel.fit(categorical_data_encoded)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:55:27.217137Z","iopub.execute_input":"2024-07-20T06:55:27.217659Z","iopub.status.idle":"2024-07-20T06:55:27.256144Z","shell.execute_reply.started":"2024-07-20T06:55:27.2176Z","shell.execute_reply":"2024-07-20T06:55:27.254656Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quasiArr=quasiModel.get_support()\ncollections.Counter(quasiArr)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:55:29.471791Z","iopub.execute_input":"2024-07-20T06:55:29.472268Z","iopub.status.idle":"2024-07-20T06:55:29.480435Z","shell.execute_reply.started":"2024-07-20T06:55:29.472234Z","shell.execute_reply":"2024-07-20T06:55:29.479238Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Print out quasi constant feature name\nquasiCols=[col for col in categorical_data_encoded.columns if col not in categorical_data_encoded.columns[quasiArr]]\nquasiCols","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:55:31.479789Z","iopub.execute_input":"2024-07-20T06:55:31.480995Z","iopub.status.idle":"2024-07-20T06:55:31.490115Z","shell.execute_reply.started":"2024-07-20T06:55:31.480954Z","shell.execute_reply":"2024-07-20T06:55:31.488813Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Observation**\n\nThese columns need to removed as the following features have the high constant values in our da\n\n- **Numerical Data** :- No Columns have the constant values.\n- **Categorical Data** :- 'category', 'currency', 'fee', 'price_type'ta","metadata":{}},{"cell_type":"code","source":"data = data.drop(columns =['category', 'currency', 'fee', 'price_type'])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:56:07.034111Z","iopub.execute_input":"2024-07-20T06:56:07.034604Z","iopub.status.idle":"2024-07-20T06:56:07.063286Z","shell.execute_reply.started":"2024-07-20T06:56:07.034567Z","shell.execute_reply":"2024-07-20T06:56:07.062027Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:56:16.507206Z","iopub.execute_input":"2024-07-20T06:56:16.507796Z","iopub.status.idle":"2024-07-20T06:56:16.517102Z","shell.execute_reply.started":"2024-07-20T06:56:16.507753Z","shell.execute_reply":"2024-07-20T06:56:16.515513Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 4.2 Checking for the duplicate columns","metadata":{}},{"cell_type":"code","source":"def duplicateColumns(data):\n    dupliCols=[]\n    for i in range(0,len(data.columns)):\n        col1=data.columns[i]\n        for col2 in data.columns[i+1:]:\n            if data[col1].equals(data[col2]):\n                dupliCols.append(col1+','+col2)\n    return dupliCols","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:56:39.558127Z","iopub.execute_input":"2024-07-20T06:56:39.559123Z","iopub.status.idle":"2024-07-20T06:56:39.56598Z","shell.execute_reply.started":"2024-07-20T06:56:39.559072Z","shell.execute_reply":"2024-07-20T06:56:39.564712Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"duplCols=duplicateColumns(data)\nduplCols","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:56:49.00542Z","iopub.execute_input":"2024-07-20T06:56:49.005821Z","iopub.status.idle":"2024-07-20T06:56:49.02759Z","shell.execute_reply.started":"2024-07-20T06:56:49.005791Z","shell.execute_reply":"2024-07-20T06:56:49.026291Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**No duplicate columns in the data**","metadata":{}},{"cell_type":"markdown","source":"## 4.3 Removing the features with high cardinality ","metadata":{}},{"cell_type":"markdown","source":"This is done because of the following reasons :- \n\n- Reducing the dimensionality of data.\n- Avoid excessive use of memory.\n- Better interpretation of data due to reduce feature space.","metadata":{}},{"cell_type":"code","source":"categorical_columns = [col for col in data.columns if data[col].dtype == object]\ncolumns_with_high_cardinality = [col for col in categorical_columns if data[col].nunique() > 20]\nprint(columns_with_high_cardinality)\ndata.drop(columns_with_high_cardinality, axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:57:32.996431Z","iopub.execute_input":"2024-07-20T06:57:32.997593Z","iopub.status.idle":"2024-07-20T06:57:33.091391Z","shell.execute_reply.started":"2024-07-20T06:57:32.997532Z","shell.execute_reply":"2024-07-20T06:57:33.090187Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:57:43.151408Z","iopub.execute_input":"2024-07-20T06:57:43.151839Z","iopub.status.idle":"2024-07-20T06:57:43.161887Z","shell.execute_reply.started":"2024-07-20T06:57:43.151805Z","shell.execute_reply":"2024-07-20T06:57:43.160191Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:57:54.766897Z","iopub.execute_input":"2024-07-20T06:57:54.768139Z","iopub.status.idle":"2024-07-20T06:57:54.777211Z","shell.execute_reply.started":"2024-07-20T06:57:54.768068Z","shell.execute_reply":"2024-07-20T06:57:54.775918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"numerical_columns = data.select_dtypes(include=['number']).columns\ncorr = numerical_data.corr()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:58:07.621509Z","iopub.execute_input":"2024-07-20T06:58:07.621957Z","iopub.status.idle":"2024-07-20T06:58:07.708764Z","shell.execute_reply.started":"2024-07-20T06:58:07.621923Z","shell.execute_reply":"2024-07-20T06:58:07.707496Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"corr","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:58:20.442455Z","iopub.execute_input":"2024-07-20T06:58:20.442874Z","iopub.status.idle":"2024-07-20T06:58:20.465299Z","shell.execute_reply.started":"2024-07-20T06:58:20.442843Z","shell.execute_reply":"2024-07-20T06:58:20.463832Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = data.drop(columns =['time'])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:58:30.422802Z","iopub.execute_input":"2024-07-20T06:58:30.423903Z","iopub.status.idle":"2024-07-20T06:58:30.438022Z","shell.execute_reply.started":"2024-07-20T06:58:30.423858Z","shell.execute_reply":"2024-07-20T06:58:30.436603Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:58:39.015925Z","iopub.execute_input":"2024-07-20T06:58:39.017032Z","iopub.status.idle":"2024-07-20T06:58:39.024975Z","shell.execute_reply.started":"2024-07-20T06:58:39.016992Z","shell.execute_reply":"2024-07-20T06:58:39.023328Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def calculate_similarity_percentage(df, col1, col2):\n    # Ensure both columns exist in the DataFrame\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(f\"Columns {col1} and/or {col2} not found in DataFrame\")\n    \n    # Calculate the number of rows where the values are equal\n    equal_values_count = (df[col1] == df[col2]).sum()\n    \n    # Calculate the total number of rows\n    total_rows = len(df)\n    \n    # Calculate the percentage of similarity\n    similarity_percentage = (equal_values_count / total_rows) * 100\n    \n    return similarity_percentage","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:58:51.324327Z","iopub.execute_input":"2024-07-20T06:58:51.324785Z","iopub.status.idle":"2024-07-20T06:58:51.333257Z","shell.execute_reply.started":"2024-07-20T06:58:51.324753Z","shell.execute_reply":"2024-07-20T06:58:51.331433Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"similarity = calculate_similarity_percentage(data, 'price', 'price_display')\nprint(f\"The columns 'col1' and 'col2' are {similarity:.2f}% similar.\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:59:00.951178Z","iopub.execute_input":"2024-07-20T06:59:00.951617Z","iopub.status.idle":"2024-07-20T06:59:00.960325Z","shell.execute_reply.started":"2024-07-20T06:59:00.951585Z","shell.execute_reply":"2024-07-20T06:59:00.958639Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = data.drop(columns =['price_display'])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:59:20.95754Z","iopub.execute_input":"2024-07-20T06:59:20.957936Z","iopub.status.idle":"2024-07-20T06:59:22.846263Z","shell.execute_reply.started":"2024-07-20T06:59:20.957908Z","shell.execute_reply":"2024-07-20T06:59:22.844413Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:59:34.68021Z","iopub.execute_input":"2024-07-20T06:59:34.680781Z","iopub.status.idle":"2024-07-20T06:59:34.703581Z","shell.execute_reply.started":"2024-07-20T06:59:34.680732Z","shell.execute_reply":"2024-07-20T06:59:34.702166Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 4.3 Converting the categorical features into numerical features ","metadata":{}},{"cell_type":"code","source":"def one_hot_encode(data, column):\n    encoded = pd.get_dummies(data[column], drop_first= True,dtype=float)\n    data = data.drop(column, axis = 1)\n    data = data.join(encoded)\n    return data","metadata":{"execution":{"iopub.status.busy":"2024-07-20T06:59:59.762211Z","iopub.execute_input":"2024-07-20T06:59:59.762701Z","iopub.status.idle":"2024-07-20T06:59:59.769849Z","shell.execute_reply.started":"2024-07-20T06:59:59.762665Z","shell.execute_reply":"2024-07-20T06:59:59.768618Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"columns = ['has_photo','pets_allowed']\nfor col in columns:\n    data = one_hot_encode(data, col)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T07:00:08.861772Z","iopub.execute_input":"2024-07-20T07:00:08.862294Z","iopub.status.idle":"2024-07-20T07:00:08.930267Z","shell.execute_reply.started":"2024-07-20T07:00:08.862253Z","shell.execute_reply":"2024-07-20T07:00:08.928951Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 5.Model Building and Evaluation","metadata":{}},{"cell_type":"markdown","source":"## 5.1 Dividing the data into train and test","metadata":{}},{"cell_type":"code","source":"# Check for non-positive values\nnon_positive_values = data['price'] <= 0\nprint(\"Number of non-positive values in 'price':\", non_positive_values.sum())","metadata":{"execution":{"iopub.status.busy":"2024-07-20T07:00:43.217225Z","iopub.execute_input":"2024-07-20T07:00:43.217737Z","iopub.status.idle":"2024-07-20T07:00:43.22688Z","shell.execute_reply.started":"2024-07-20T07:00:43.217698Z","shell.execute_reply":"2024-07-20T07:00:43.225389Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = data.drop('price', axis= 1)\ny = data['price']\n\nbc_result = boxcox(y)\ny_boxcox = bc_result[0]\nlambda_ = bc_result[1]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y_boxcox, test_size= 0.2, random_state = 42)\n\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T07:00:52.952869Z","iopub.execute_input":"2024-07-20T07:00:52.954193Z","iopub.status.idle":"2024-07-20T07:00:53.104191Z","shell.execute_reply.started":"2024-07-20T07:00:52.954141Z","shell.execute_reply":"2024-07-20T07:00:53.10304Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-20T07:01:01.804132Z","iopub.execute_input":"2024-07-20T07:01:01.804617Z","iopub.status.idle":"2024-07-20T07:01:01.813178Z","shell.execute_reply.started":"2024-07-20T07:01:01.804582Z","shell.execute_reply":"2024-07-20T07:01:01.81146Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 5.2 Model training","metadata":{}},{"cell_type":"code","source":"models = {\n    'ridge' : Ridge(),\n    'xgboost' : XGBRegressor(),\n    'catboost' : CatBoostRegressor(verbose=0),\n    'lightgbm' : LGBMRegressor(),\n    'gradient boosting' : GradientBoostingRegressor(),\n    'lasso' : Lasso(),\n    'random forest' : RandomForestRegressor(),\n    'bayesian ridge' : BayesianRidge(),\n    'support vector': SVR(),\n    'knn' : KNeighborsRegressor(n_neighbors = 4)\n}","metadata":{"execution":{"iopub.status.busy":"2024-07-20T07:01:22.505468Z","iopub.execute_input":"2024-07-20T07:01:22.505896Z","iopub.status.idle":"2024-07-20T07:01:22.516881Z","shell.execute_reply.started":"2024-07-20T07:01:22.505864Z","shell.execute_reply":"2024-07-20T07:01:22.515393Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for name, model in models.items():\n    model.fit(X_train, y_train)\n    print(f'{name} trained')","metadata":{"execution":{"iopub.status.busy":"2024-07-20T07:01:32.79893Z","iopub.execute_input":"2024-07-20T07:01:32.800324Z","iopub.status.idle":"2024-07-20T07:04:22.329964Z","shell.execute_reply.started":"2024-07-20T07:01:32.800285Z","shell.execute_reply":"2024-07-20T07:04:22.328684Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Model Cross Validation ","metadata":{}},{"cell_type":"code","source":"results = {}\nkf = KFold(n_splits= 10)\n\nfor name, model in models.items():\n    result = np.mean(np.sqrt(-cross_val_score(model, X_train, y_train, scoring = 'neg_mean_squared_error', cv= kf)))\n    results[name] = result","metadata":{"execution":{"iopub.status.busy":"2024-07-20T07:05:06.644562Z","iopub.execute_input":"2024-07-20T07:05:06.645001Z","iopub.status.idle":"2024-07-20T07:28:43.590312Z","shell.execute_reply.started":"2024-07-20T07:05:06.644962Z","shell.execute_reply":"2024-07-20T07:28:43.588987Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Model Results Comparison","metadata":{}},{"cell_type":"code","source":"for name, result in results.items():\n    print(f\"{name} : {round(result, 3)}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T08:00:45.480526Z","iopub.execute_input":"2024-07-20T08:00:45.481435Z","iopub.status.idle":"2024-07-20T08:00:45.493567Z","shell.execute_reply.started":"2024-07-20T08:00:45.481376Z","shell.execute_reply":"2024-07-20T08:00:45.491975Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_df = pd.DataFrame(results, index=range(0,1)).T.rename(columns={0: 'RMSE'}).sort_values('RMSE', ascending=False)\nresults_df.T","metadata":{"execution":{"iopub.status.busy":"2024-07-20T08:00:48.466006Z","iopub.execute_input":"2024-07-20T08:00:48.466601Z","iopub.status.idle":"2024-07-20T08:00:48.504029Z","shell.execute_reply.started":"2024-07-20T08:00:48.466564Z","shell.execute_reply":"2024-07-20T08:00:48.502577Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (20, 6))\nsns.barplot(x= results_df.index, y = results_df['RMSE'], palette = 'winter')\nplt.xlabel('Model')\nplt.ylabel('RMSE')\nplt.title('RMSE of different models');","metadata":{"execution":{"iopub.status.busy":"2024-07-20T08:00:51.76075Z","iopub.execute_input":"2024-07-20T08:00:51.761218Z","iopub.status.idle":"2024-07-20T08:00:52.380726Z","shell.execute_reply.started":"2024-07-20T08:00:51.761181Z","shell.execute_reply":"2024-07-20T08:00:52.378701Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_df = pd.DataFrame(results, index=range(0,1)).T.rename(columns={0: 'RMSE'}).sort_values('RMSE')\n# Get the top 3 models with the lowest RMSE\ntop_3_models = results_df.head(3).index\nprint(\"Top 3 models:\", top_3_models)\n\n# Calculate inverse RMSE and normalize to get weights\ninverse_rmse = {model: 1/results_df.loc[model, 'RMSE'] for model in top_3_models}\ntotal_inverse_rmse = sum(inverse_rmse.values())\nweights = {model: inv_rmse/total_inverse_rmse for model, inv_rmse in inverse_rmse.items()}\n\nprint(\"Weights:\", weights)\n\n# Combine predictions using the weights\nfinal_predictions = sum(weights[model] * inv_boxcox(models[model].predict(X_test), lambda_) for model in top_3_models)\n\n# Calculate RMSE and R-squared for the combined predictions\nrmse = np.sqrt(mean_squared_error(inv_boxcox(y_test, lambda_), final_predictions))\nr_squared = r2_score(inv_boxcox(y_test, lambda_), final_predictions)\n\nprint(f'RMSE: {rmse}')\nprint(f'R-square: {r_squared}')","metadata":{"execution":{"iopub.status.busy":"2024-07-20T08:00:55.491044Z","iopub.execute_input":"2024-07-20T08:00:55.491565Z","iopub.status.idle":"2024-07-20T08:00:57.883105Z","shell.execute_reply.started":"2024-07-20T08:00:55.49153Z","shell.execute_reply":"2024-07-20T08:00:57.881738Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.scatterplot(x=inv_boxcox(y_test, lambda_), y=final_predictions, color='#005b96')\nplt.xlabel('Actual Rent')\nplt.ylabel('Predicted Rent')\n\n# Add diagonal line for perfect prediction\nmin_val = min(inv_boxcox(y_test, lambda_).min(), final_predictions.min())\nmax_val = max(inv_boxcox(y_test, lambda_).max(), final_predictions.max())\nplt.plot([min_val, max_val], [min_val, max_val], 'r--')  # red dashed line\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T08:00:59.652792Z","iopub.execute_input":"2024-07-20T08:00:59.653236Z","iopub.status.idle":"2024-07-20T08:01:00.104716Z","shell.execute_reply.started":"2024-07-20T08:00:59.653203Z","shell.execute_reply":"2024-07-20T08:01:00.103413Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Distribution of error\nplt.figure(figsize = (10, 6))\nsns.histplot(inv_boxcox(y_test, lambda_) - final_predictions, color = '#005b96', kde= True)\nplt.xlabel('Error');","metadata":{"execution":{"iopub.status.busy":"2024-07-20T08:01:03.941256Z","iopub.execute_input":"2024-07-20T08:01:03.941735Z","iopub.status.idle":"2024-07-20T08:01:05.926223Z","shell.execute_reply.started":"2024-07-20T08:01:03.94169Z","shell.execute_reply":"2024-07-20T08:01:05.924831Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We have a R-square of 0.82 and the distribution of our residual is also normal, so our model is doing a good job in predicting the Rent","metadata":{}}]}